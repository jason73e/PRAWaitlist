@model PRAWaitList.Models.IntentToEnrollViewModel
@Html.AntiForgeryToken()

<div class="form-horizontal  col-md-12">
    <h4>Parent Information</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @for(int iParentIndex=0;iParentIndex<Model.lsParents.Count;iParentIndex++)
    {
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-horizontal  col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].pType, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EnumDropDownListFor(model => model.lsParents[iParentIndex].pType, "- Select a Parent - ", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].pType, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].LastName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].Phone1, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].Phone1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].Phone1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].Phone2, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].Phone2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].Phone2, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].Address1, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].Address1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].Address1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].City, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].City, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].City, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].ZipCode, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].ZipCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-horizontal  col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].EmailAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].EmailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].Phone1Type, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EnumDropDownListFor(model => model.lsParents[iParentIndex].Phone1Type, "- Select a Phone Type - ", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].Phone1Type, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].Phone2Type, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EnumDropDownListFor(model => model.lsParents[iParentIndex].Phone2Type, "- Select a Phone Type - ", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].Phone2Type, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].Address2, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.lsParents[iParentIndex].Address2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].Address2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].StateID, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.lsParents[iParentIndex].StateID,new SelectList(Model.States,"Value","Text", Model.lsParents[iParentIndex].StateID), "- Select a State -", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].StateID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.lsParents[iParentIndex].isPreferredContact, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.lsParents[iParentIndex].isPreferredContact)
                                @Html.ValidationMessageFor(model => model.lsParents[iParentIndex].isPreferredContact, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        @if (Model.lsParents.Count == 1)
        {
            <input id="btnAddParent" type="submit" name="AddParent" value="Add Parent" formnovalidate="formnovalidate" class="btn btn-primary" />
            <input id="btnRemoveParent" type="submit" name="RemoveParent" formnovalidate="formnovalidate" value="Remove Parent" class="btn btn-primary disabled" />
        }
        else
        {
            <input id="btnAddParent" type="submit" name="AddParent" value="Add Parent" formnovalidate="formnovalidate" class="btn btn-primary disabled" />
            <input id="btnRemoveParent" type="submit" name="RemoveParent" value="Remove Parent" class="btn btn-primary" formnovalidate="formnovalidate" onclick = "return confirm('Are you sure you wish to delete the last parent?');"/>
        }
    </div>
</div>
